1. 实现的是API GateWay的功能

2. 定义了一个过滤器，并且在yml中配置了是不是使用，默认过滤也有相应的配置，这里没有demo

3. 关于header传递的问题，这里没有写代码

4. 定义类一个Fallback方法
   zuul的Fallback方法和其他服务定义的Fallback方法不太一样，
   zuul的Fallback是请求服务超时的时候才会显示出来，如果抛出异常了，或者服务不存在，则不走断路器方法。
     order服务调用底层服务的超时时间大概是1秒以内，不管是超时了还是抛出异常了，都会走断路器方法，但是在zuul里调用order的这个方法就会有如下奇葩现象
          一个比较奇怪的现象就是，如果底层的服务比如order比如user，如果方法是超时了的话，尤其是order方法，本来有自己的断路器处理，结果却没走order的反而是走的zuul的
                但是如果底层服务，没有超时抛出异常了，如果自己有了断路器方法，就会走底层服务的，而不是走zuul的。不知道zuul到底是怎么干的。
                这个问题终于想通了，原来zuul和微服务的超时时间是一样的，所以，微服务调用底层超时，再得到fallback结果返回给zuul的时候一定是大于超时时间的，所以zuul这边实在是没有收到微服务的Fallback结果，就自己先Fallback了。
5.zuul还有可以代理文件上传功能，这里就不演示了，里边要注意设置超时时间等问题，或者通过/zuul/微服务/方法的形式去调用